<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="--------------------" />
      <item value="Like {@link #readRawVarint32(InputStream)}, but expects that the caller has already read one * byte. This allows the caller to determine if EOF has been reached before attempting to read." />
      <item value="that an embedded message misreported its own length." />
      <item value="Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay. Subsequent executions take place at approximately regular intervals, separated by the specified period." />
      <item value="Internal class to manage all Timers using one thread. * TimerQueue manages a queue of Timers. The Timers are chained * together in a linked list sorted by the order in which they will expire." />
      <item value="previous" />
      <item value="Ronbin Record" />
      <item value="Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The entire method invocation is performed atomically." />
      <item value="Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)." />
      <item value="Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other" />
      <item value="write Delimited To" />
      <item value="Guaranteed to throw an exception and leave the map unmodified." />
      <item value="This class shows how to use the full extent of Spring Shell without relying on Boot auto configuration." />
      <item value="Actuator Endpoints" />
      <item value="Example CommandLineRunner that shows how overall shell behavior can be customized. In * this particular example, any program (process) arguments are assumed to be shell * commands that need to be executed (and the shell then quits)." />
      <item value="An example straight from the JCommander documentation." />
      <item value="Flag to indicate if the run processes should be forked. {@code fork} is automatically enabled if an agent, jvmArguments or working directory are specified, or if devtools is present." />
      <item value="main" />
      <item value="IMPLIED" />
      <item value="is Queueing" />
      <item value="is Pipelined" />
      <item value="Adds an {@link Cookie HTTP cookie}, replacing any existing equivalent cookies. * If the given cookie has already expired it will not be added, but existing * values will still be removed." />
      <item value="equivalent" />
      <item value="A URI is absolute if, and only if, it has a scheme component." />
      <item value="SLAVE 0" />
      <item value="MASTER" />
      <item value="gsms Data Source" />
      <item value="gsms Slave Data Source" />
      <item value="filter" />
      <item value="there are no next card verify status&quot;" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="197" />
        <entry key="ENGLISH" value="197" />
        <entry key="ALBANIAN" value="1" />
        <entry key="DANISH" value="2" />
        <entry key="LUXEMBOURGISH" value="2" />
        <entry key="SUNDANESE" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
      </youdao-translate>
    </option>
  </component>
</application>