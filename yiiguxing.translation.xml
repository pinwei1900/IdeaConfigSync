<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument." />
      <item value="minCapacity is usually close to size, so this is a win:" />
      <item value="overflow-conscious code" />
      <item value="Performs this operation on the given arguments." />
      <item value="Bi Consumer" />
      <item value="intermediate operation" />
      <item value="an unordered stream" />
      <item value="a parallel stream" />
      <item value="a sequential stream" />
      <item value="Returns an equivalent stream that is sequential. May return * itself, either because the stream was already sequential, or because * the underlying stream state was modified to be sequential." />
      <item value="sequential" />
      <item value="a stream with a handler that is run if the stream is closed" />
      <item value="Returns an equivalent stream with an additional close handler." />
      <item value="unordered" />
      <item value="Returns a spliterator for the elements of this stream." />
      <item value="Links e as last element." />
      <item value="GC overhead limit exceeded" />
      <item value="indexed Binary Search" />
      <item value="The list must be sorted into ascending order * according to the specified comparator (as by the" />
      <item value="Searches the specified list for the specified object using the binary * search algorithm." />
      <item value="the list to be searched." />
      <item value="Returns the (non-null) Node at the specified element index." />
      <item value="Gets the ith element from the given list by repositioning the specified * list listIterator." />
      <item value="iterator Binary Search" />
      <item value="BINARYSEARCH THRESHOLD" />
      <item value="origin of usable space in work array" />
      <item value="legacy Merge Sort" />
      <item value="&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array." />
      <item value="The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993." />
      <item value="Shared empty array instance used for empty instances" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="58" />
        <entry key="ENGLISH" value="58" />
        <entry key="DANISH" value="1" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>