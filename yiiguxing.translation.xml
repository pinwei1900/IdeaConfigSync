<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="AUTO" />
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="// Close the connection if the connection attempt has failed." />
      <item value="// connection complete start to read first data" />
      <item value="therefore" />
      <item value="volatile" />
      <item value="// As we use inboundChannel.eventLoop() when building the Bootstrap this does not need to be volatile as // the outboundChannel will use the same EventLoop (and therefore Thread) as the inboundChannel." />
      <item value="// was able to flush out data, start to read the next chunk" />
      <item value="complete" />
      <item value="connection complete start to read first data" />
      <item value="Hex Dump Proxy Frontend Handler" />
      <item value="Event Loop Group" />
      <item value="Hex Dump Proxy" />
      <item value="Connection refused" />
      <item value="Custom Mo Service Impl" />
      <item value="custom Mo Service" />
      <item value="Binary Memcache Object Aggregator" />
      <item value="tail" />
      <item value="enabled" />
      <item value="Returns a channel where the I/O operation associated with this future takes place." />
      <item value="A data stream of indefinite length which is consumed by {@link ChunkedWriteHandler}." />
      <item value="suspend" />
      <item value="chunked" />
      <item value="Once inserted, you can write a ChunkedInput so that the ChunkedWriteHandler can pick it up and fetch the content of the stream chunk by chunk and write the fetched chunk downstream:" />
      <item value="Chunked Input" />
      <item value="complicated" />
      <item value="manages" />
      <item value="Chunked Write Handler" />
      <item value="A ChannelHandler that adds support for writing a large data stream asynchronously neither spending a lot of memory nor getting OutOfMemoryError. Large data streaming such as file transfer requires complicated state management in a ChannelHandler implementation. ChunkedWriteHandler manages such complicated states so that you can send a large data stream without difficulties." />
      <item value="String Decoder" />
      <item value="File Server Handler" />
      <item value="Line Based Frame Decoder" />
    </histories>
  </component>
  <component name="Settings">
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>