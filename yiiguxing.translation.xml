<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="AUTO" />
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="* very simple stomp client implementation example, requires running stomp server to actually work * uses default username/password and destination values from hornetq message broker" />
      <item value="Detects the version of the current SOCKS connection and initializes the pipeline with Socks4ServerDecoder or Socks5InitialRequestDecoder." />
      <item value="Once session is secured, send a greeting and register the channel to the global channel // list so the channel received the messages from others." />
      <item value="Add SSL handler first to encrypt and decrypt everything. // In this example, we use a bogus certificate in the server side // and accept any invalid certificates in the client side. // You will need something more complicated to identify both // and server in the real world." />
      <item value="complicated" />
      <item value="invalid" />
      <item value="certificate" />
      <item value="bogus" />
      <item value="Unable to create Channel from class class io.netty.channel.sctp.nio.NioSctpChannel" />
      <item value="Unable to create Channel from class class io.netty.channel.sctp.nio.NioSctpServerChannel" />
      <item value="config.properties (系统找不到指定的文件。)" />
      <item value="indication" />
      <item value="enter Local Passive Mode" />
      <item value="obtained" />
      <item value="download" />
      <item value="tear Down" />
      <item value="后缀" />
      <item value="前缀" />
      <item value="Unable to create Channel from class interface io.netty.channel.socket.SocketChannel" />
      <item value="// Close the connection if the connection attempt has failed." />
      <item value="// connection complete start to read first data" />
      <item value="therefore" />
      <item value="volatile" />
      <item value="// As we use inboundChannel.eventLoop() when building the Bootstrap this does not need to be volatile as // the outboundChannel will use the same EventLoop (and therefore Thread) as the inboundChannel." />
      <item value="// was able to flush out data, start to read the next chunk" />
      <item value="complete" />
      <item value="connection complete start to read first data" />
      <item value="Hex Dump Proxy Frontend Handler" />
      <item value="Event Loop Group" />
      <item value="Hex Dump Proxy" />
    </histories>
  </component>
  <component name="Settings">
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>