<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="estimate" />
      <item value="The index one greater than the index of the last valid byte in the buffer. This value is always in the range 0 through buf.length;" />
      <item value="internal" />
      <item value="Windows Preferences" />
      <item value="This class is used to restrict the usage of the Kerberos * delegation model, ie: forwardable and proxiable tickets." />
      <item value="enlisted" />
      <item value="An object that provides support for distributed * transactions." />
      <item value="An object that provides support for distributed" />
      <item value="Provides an easy way to collect diagnostics in a list." />
      <item value="Recursive Task" />
      <item value="Double Adder" />
      <item value="dying worker" />
      <item value="Performs cleanup and bookkeeping for a dying worker. Called * only from worker threads. Unless completedAbruptly is set, * assumes that workerCount has already been adjusted to account * for exit. This method removes thread from worker set, and * possibly terminates the pool or replaces the worker if either * it exited due to user task exception or if fewer than * corePoolSize workers are running or queue is non-empty but * there are no workers." />
      <item value="completed Abruptly" />
      <item value="Eligible to terminate" />
      <item value="Common form of interruptIdleWorkers, to avoid having to * remember what the boolean argument means." />
      <item value="interrupt Idle Workers" />
      <item value="ONLY ONE" />
      <item value="TERMINATED" />
      <item value="TIDYING" />
      <item value="Recheck while holding lock." />
      <item value="Main worker run loop. Repeatedly gets tasks from queue and * executes them, while coping with a number of issues:" />
      <item value="Performs blocking or timed wait for a task, depending on * current configuration settings, or returns null if this worker" />
      <item value="Attempts to CAS-increment the workerCount field of ctl." />
      <item value="saturated" />
      <item value="Executes the given task sometime in the future. The task may execute in a new thread or in an existing pooled thread. If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current RejectedExecutionHandler." />
      <item value="If a task can be successfully queued, then we still need * to double-check whether we should have added a thread * (because existing ones died since last checking) or that * the pool shut down since entry into this method. So we * recheck state and if necessary roll back the enqueuing if * stopped, or start a new thread if there are none." />
      <item value="If fewer than corePoolSize threads are running, try to * start a new thread with the given command as its first * task. The call to addWorker atomically checks runState and * workerCount, and so prevents false alarms that would add * threads when it shouldn't, by returning false." />
      <item value="The default rejected execution handler" />
      <item value="the handler to use when execution is blocked * because the thread bounds and queue capacities are reached" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="113" />
        <entry key="ENGLISH" value="114" />
        <entry key="ALBANIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="LUXEMBOURGISH" value="2" />
        <entry key="SUNDANESE" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>