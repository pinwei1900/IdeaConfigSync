<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="AUTO" />
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="he wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and Hagersten) lock queue. CLH locks are normally used for spinlocks. We instead use them for blocking synchronizers, but use the same basic tactic of holding some of the control information about a thread in the predecessor of its node. A &quot;status&quot; field in each node keeps track of whether a thread should block. A node is signalled when its predecessor releases. Each node of the queue otherwise serves as a specific-notification-style monitor holding a single waiting thread. The status field does NOT control whether threads are granted locks etc though. A thread may try to acquire if it is first in the queue. But being first does not guarantee success; it only gives the right to contend. So the currently released contender thread may need to rewait." />
      <item value="Base of synchronization control for this lock. Subclassed into fair and nonfair versions below. Uses AQS state to represent the number of holds on the lock." />
      <item value="ase of synchronization control for this lock. Subclassed into fair and nonfair versions below. Uses AQS state to represent the number of holds on the lock." />
      <item value="Acquires the lock unless the current thread is interrupted. Acquires the lock if it is available and returns immediately." />
      <item value="Local cache impliment, load the black or white list from local" />
      <item value="A MsgPack of kryo Serializer for redis" />
      <item value="Availability RedisCache handler, the redis operator" />
      <item value="A kryo Serializer for redis" />
      <item value="Token Bucket" />
      <item value="Abstract rate limiter config" />
      <item value="Default Traffic Limit Handler" />
      <item value="remove the mark of Limit the duplicate send" />
      <item value="Limit the duplicate send, will return true if limited, false or not." />
      <item value="Drizzt" />
      <item value="BUSINESS CHANGE" />
      <item value="CHANNEL CHANGE" />
      <item value="KEY GENERATOR" />
      <item value="Sends a message to this channel asynchronously. If this channel was created by a connectionless transport (e.g. DatagramChannel) and is not connected yet, you have to call write(Object, SocketAddress) instead. Otherwise, the write request will fail with NotYetConnectedException and an 'exceptionCaught' event will be triggered." />
      <item value="is Async Persist" />
      <item value="Billing Filter" />
      <item value="Flip Frame Filter" />
      <item value="Routing Failed Filter" />
      <item value="Static filter group, it's made up of pre-defined static filters." />
      <item value="Identity certified filter" />
      <item value="Temporary pack of the message pack data" />
      <item value="AUDITING" />
      <item value="UNDLER LINE" />
      <item value="SUGER RESPONSE" />
      <item value="SUGERRESPONSE" />
      <item value="Attaches an object to this context to store a stateful information specific to the ChannelHandler which is associated with this context." />
    </histories>
  </component>
  <component name="Settings">
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>