<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="indexed Binary Search" />
      <item value="The list must be sorted into ascending order * according to the specified comparator (as by the" />
      <item value="Searches the specified list for the specified object using the binary * search algorithm." />
      <item value="the list to be searched." />
      <item value="Returns the (non-null) Node at the specified element index." />
      <item value="Gets the ith element from the given list by repositioning the specified * list listIterator." />
      <item value="iterator Binary Search" />
      <item value="BINARYSEARCH THRESHOLD" />
      <item value="origin of usable space in work array" />
      <item value="legacy Merge Sort" />
      <item value="&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array." />
      <item value="The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993." />
      <item value="Shared empty array instance used for empty instances" />
      <item value="Default initial capacity." />
      <item value="last Ret" />
      <item value="element Data" />
      <item value="Concurrent Modification Exception" />
      <item value="Returns the next element in the list and advances the cursor position. * This method may be called repeatedly to iterate through the list, * or intermixed with calls to {@link #previous} to go back and forth. * (Note that alternating calls to {@code next} and {@code previous} * will return the same element repeatedly.)" />
      <item value="check For Comodification" />
      <item value="the comparator to determine the order of the array. A * {@code null} value indicates that the elements' * {@linkplain Comparable natural ordering} should be used." />
      <item value="A {@code null} value indicates that the elements' * {@linkplain Comparable natural ordering} should be used" />
      <item value="A {@code null} value indicates that the elements'" />
      <item value="ROTATE THRESHOLD" />
      <item value="FILL THRESHOLD" />
      <item value="SHUFFLE THRESHOLD" />
      <item value="REVERSE THRESHOLD" />
      <item value="THRESHOLD" />
      <item value="CONCURRENT" />
      <item value="characteristics" />
      <item value="Characteristics of this spliterator's source or elements. The characteristics SIZED and SUBSIZED are additionally reported unless CONCURRENT is supplied." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="43" />
        <entry key="ENGLISH" value="44" />
        <entry key="DANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>