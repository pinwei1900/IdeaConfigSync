<application>
  <component name="AppStorage">
    <option name="lastSourceLanguage" value="AUTO" />
    <option name="lastTargetLanguage" value="AUTO" />
    <option name="maxHistorySize" value="30" />
    <histories>
      <item value="Notice Service" />
      <item value="Mapped Statements collection does not contain value for com.x" />
      <item value="The servlet must be specified before calling onStartup(javax.servlet.ServletContext). URL mapping can be configured used setUrlMappings(java.util.Collection&lt;java.lang.String&gt;) or omitted when mapping to '/*' (unless alwaysMapUrl is set to false). The servlet name will be deduced if not specified." />
      <item value="town" />
      <item value="Annotation-specified bean name 'cancelCardResource' for bean class [com.xuanwu.iot.resources.storage.CancelCardResource] conflicts with existing, non-compatible bean definition of same name and class [com.xuanwu.iot.resources.CancelCardResource]" />
      <item value="Balance" />
      <item value="set Balance" />
      <item value="get Exsit Bind Account Of User" />
      <item value="Identify and stop the process that's listening on port 8010 or configure this application to listen on another port." />
      <item value="Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream." />
      <item value="pcontact" />
      <item value="Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed" />
      <item value="nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException" />
      <item value="Obtains the message entity of this response, if any. * The entity is provided by calling {@link #setEntity setEntit" />
      <item value="Closes the specified channel after all queued write requests are flushed." />
      <item value="Request to Read data from the Channel into the first inbound buffer, triggers an ChannelInboundHandler.channelRead(ChannelHandlerContext, Object) event if data was read, and triggers a channelReadComplete event so the handler can decide to continue reading. If there's a pending read operation already, this method does nothing." />
      <item value="Recycle the array which will clear it and null out all entries in the internal storage." />
      <item value="Request to write a message via this ChannelHandlerContext through the ChannelPipeline. This method will not request to actual flush, so be sure to call flush() once you want to request to flush all pending data to the actual transport." />
      <item value="Remove the following line if you don't want automatic content decompression." />
      <item value="capital" />
      <item value="gsms capital account" />
      <item value="Invocation Target Exception" />
      <item value="All written so clear OP_WRITE" />
      <item value="Directly return here so incompleteWrite(...) is not called." />
      <item value="Returns true if there are flushed messages in this ChannelOutboundBuffer or false otherwise." />
      <item value="We have something else beside ByteBuffers to write so fallback to normal writes." />
      <item value="the fetched chunk. null if there is no data left in the stream. Please note that null does not necessarily mean that the stream has reached at its end. In a slow stream, the next chunk might be unavailable just momentarily." />
      <item value="Pending Write" />
      <item value="Request to flush all pending messages via this ChannelOutboundInvoker." />
      <item value="Returns true if and only if the I/O thread will perform the requested write operation immediately. Any write requests made when this method returns false are queued until the I/O thread is ready to process the queued write requests." />
    </histories>
  </component>
  <component name="Settings">
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5c565298cc6d41a2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>